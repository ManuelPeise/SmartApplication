// <auto-generated />
using System;
using Data.AppContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.AppContext.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250110154509_InitDatabase")]
    partial class InitDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Data.Shared.Logging.LogMessageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<string>("Module")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("LogMessages");
                });

            modelBuilder.Entity("Data.Shared.Tools.EmailAccountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("EmailCleanerSettingsId")
                        .HasColumnType("int");

                    b.Property<string>("EncodedPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MessageLogJson")
                        .HasColumnType("longtext");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int>("ProviderType")
                        .HasColumnType("int");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailCleanerSettingsId");

                    b.ToTable("EmailAccounts");
                });

            modelBuilder.Entity("Data.Shared.Tools.EmailAddressMappingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Domain")
                        .HasColumnType("longtext");

                    b.Property<int>("EmailCleanerSettingsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSpam")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PredictedAs")
                        .HasColumnType("longtext");

                    b.Property<bool>("ShouldCleanup")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SourceAddress")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailCleanerSettingsId");

                    b.ToTable("EmailAddressMappings");
                });

            modelBuilder.Entity("Data.Shared.Tools.EmailCleanerSettingsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("AllowCreateEmailFolder")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowDeleteEmails")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowMoveEmails")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowReadEmails")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastCleanupTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("NextCleanupTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ScheduleCleanup")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ScheduleCleanupAtHour")
                        .HasColumnType("int");

                    b.Property<bool>("ShareEmailDataToTrainAi")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EmailCleanerSettings");
                });

            modelBuilder.Entity("Data.Shared.Tools.EmailAccountEntity", b =>
                {
                    b.HasOne("Data.Shared.Tools.EmailCleanerSettingsEntity", "EmailCleanerSettings")
                        .WithMany()
                        .HasForeignKey("EmailCleanerSettingsId");

                    b.Navigation("EmailCleanerSettings");
                });

            modelBuilder.Entity("Data.Shared.Tools.EmailAddressMappingEntity", b =>
                {
                    b.HasOne("Data.Shared.Tools.EmailCleanerSettingsEntity", "EmailCleanerSettings")
                        .WithMany("EmailAddressMappings")
                        .HasForeignKey("EmailCleanerSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailCleanerSettings");
                });

            modelBuilder.Entity("Data.Shared.Tools.EmailCleanerSettingsEntity", b =>
                {
                    b.Navigation("EmailAddressMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
