// <auto-generated />
using System;
using Data.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Identity.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20250108152844_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Data.Shared.AccessRights.AccessRightEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AccessRights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 8, 15, 28, 42, 901, DateTimeKind.Utc).AddTicks(5189),
                            CreatedBy = "System",
                            Group = "Administration",
                            Name = "UserAdministration"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 8, 15, 28, 42, 901, DateTimeKind.Utc).AddTicks(5193),
                            CreatedBy = "System",
                            Group = "Administration",
                            Name = "MessageLog"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 8, 15, 28, 42, 901, DateTimeKind.Utc).AddTicks(5195),
                            CreatedBy = "System",
                            Group = "Settings",
                            Name = "EmailAccountSettings"
                        });
                });

            modelBuilder.Entity("Data.Shared.AccessRights.UserAccessRightEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessRightId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Deny")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Edit")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("View")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AccessRightId");

                    b.ToTable("UserAccessRights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessRightId = 1,
                            CreatedAt = new DateTime(2025, 1, 8, 15, 28, 42, 901, DateTimeKind.Utc).AddTicks(7302),
                            CreatedBy = "System",
                            Deny = false,
                            Edit = true,
                            UserId = 1,
                            View = true
                        },
                        new
                        {
                            Id = 2,
                            AccessRightId = 2,
                            CreatedAt = new DateTime(2025, 1, 8, 15, 28, 42, 901, DateTimeKind.Utc).AddTicks(7306),
                            CreatedBy = "System",
                            Deny = false,
                            Edit = true,
                            UserId = 1,
                            View = true
                        },
                        new
                        {
                            Id = 3,
                            AccessRightId = 3,
                            CreatedAt = new DateTime(2025, 1, 8, 15, 28, 42, 901, DateTimeKind.Utc).AddTicks(7307),
                            CreatedBy = "System",
                            Deny = false,
                            Edit = true,
                            UserId = 1,
                            View = true
                        });
                });

            modelBuilder.Entity("Data.Shared.Identity.Entities.UserCredentials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Credentials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 8, 16, 28, 42, 901, DateTimeKind.Local).AddTicks(5267),
                            CreatedBy = "System",
                            ExpiresAt = new DateTime(2025, 4, 8, 16, 28, 42, 901, DateTimeKind.Local).AddTicks(5267),
                            Password = "Am1I3JdgO3aS/VUSZ8kfKQ==",
                            RefreshToken = "",
                            UpdatedAt = new DateTime(2025, 1, 8, 16, 28, 42, 901, DateTimeKind.Local).AddTicks(5267),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Data.Shared.Identity.Entities.UserIdentity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CredentialsId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNewUserRegistration")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CredentialsId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 8, 16, 28, 42, 901, DateTimeKind.Local).AddTicks(7201),
                            CreatedBy = "System",
                            CredentialsId = 1,
                            Email = "admin.user@gmx.de",
                            FirstName = "Admin",
                            IsActive = true,
                            IsNewUserRegistration = false,
                            LastName = "User",
                            RoleId = 2,
                            UpdatedAt = new DateTime(2025, 1, 8, 16, 28, 42, 901, DateTimeKind.Local).AddTicks(7201),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("Data.Shared.Identity.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ResourceKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Data.Shared.AccessRights.UserAccessRightEntity", b =>
                {
                    b.HasOne("Data.Shared.AccessRights.AccessRightEntity", "AccessRight")
                        .WithMany()
                        .HasForeignKey("AccessRightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessRight");
                });

            modelBuilder.Entity("Data.Shared.Identity.Entities.UserIdentity", b =>
                {
                    b.HasOne("Data.Shared.Identity.Entities.UserCredentials", "UserCredentials")
                        .WithMany()
                        .HasForeignKey("CredentialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Shared.Identity.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCredentials");

                    b.Navigation("UserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
